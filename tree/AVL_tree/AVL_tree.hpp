#pragma once
#include <iostream>

// 平衡二叉树（Balanced Binary Tree）是二叉查找树的一个进化体，也是第一个引入平衡概念的二叉树。
// 1962年，G.M. Adelson-Velsky 和 E.M. Landis发明了这棵树，所以它又叫AVL树。平衡二叉树要求对于
// 每一个节点来说，它的左右子树的高度之差不能超过1，如果插入或者删除一个节点使得高度之差大于1，
// 就要进行节点之间的旋转，将二叉树重新维持在一个平衡状态。这个方案很好的解决了二叉查找树退化
// 成链表的问题，把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。但是频繁旋
// 转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。

//思考：1. 平衡二叉树，首先是搜索二叉树
//      2. 同样的一组有序序列，理论上可以构建出不同的搜索二叉树（只要满足搜索二叉树的概念即可）
//      3. 在一个搜索二叉树中，每个子树满足搜索二叉树的定义, 所以理论上，无论你对子树如何调整，只要
//      4. 该子树依旧满足搜索二叉树的概念，则该树整体不受影响
//      5. 平衡二叉树就是根据上面的概念，来避免搜索二叉树退化问题



